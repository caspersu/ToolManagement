//------------------------------------------------------------------------------
// <auto-generated>
//     這個程式碼是由範本產生。
//
//     對這個檔案進行手動變更可能導致您的應用程式產生未預期的行為。
//     如果重新產生程式碼，將會覆寫對這個檔案的手動變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tool_Management.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ToolManagementEntities : DbContext
    {
        public ToolManagementEntities()
            : base("name=ToolManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cabin> Cabins { get; set; }
        public virtual DbSet<CNC_Alarm_Code_Mapping> CNC_Alarm_Code_Mapping { get; set; }
        public virtual DbSet<CNC_ALARM_Log> CNC_ALARM_Log { get; set; }
        public virtual DbSet<CNC_ATCTL_Log> CNC_ATCTL_Log { get; set; }
        public virtual DbSet<CNC_PRD3_Log> CNC_PRD3_Log { get; set; }
        public virtual DbSet<CNC_PRDC2_Log> CNC_PRDC2_Log { get; set; }
        public virtual DbSet<CNC_StatusHistory> CNC_StatusHistory { get; set; }
        public virtual DbSet<CNC_Ver_Log> CNC_Ver_Log { get; set; }
        public virtual DbSet<CNC_WKCNTR_Log> CNC_WKCNTR_Log { get; set; }
        public virtual DbSet<CNCDetail> CNCDetails { get; set; }
        public virtual DbSet<CNCKnifeList> CNCKnifeLists { get; set; }
        public virtual DbSet<CNCMaster> CNCMasters { get; set; }
        public virtual DbSet<CNCMonitor> CNCMonitors { get; set; }
        public virtual DbSet<Collet1Detail> Collet1Detail { get; set; }
        public virtual DbSet<Collet1Master> Collet1Master { get; set; }
        public virtual DbSet<Collet2Detail> Collet2Detail { get; set; }
        public virtual DbSet<Collet2Master> Collet2Master { get; set; }
        public virtual DbSet<Employe> Employes { get; set; }
        public virtual DbSet<ExtRodDetail> ExtRodDetails { get; set; }
        public virtual DbSet<ExtRodMaster> ExtRodMasters { get; set; }
        public virtual DbSet<Good> Goods { get; set; }
        public virtual DbSet<HiltDetail> HiltDetails { get; set; }
        public virtual DbSet<HiltMaster> HiltMasters { get; set; }
        public virtual DbSet<Inform> Informs { get; set; }
        public virtual DbSet<KnifeChangeFrom> KnifeChangeFroms { get; set; }
        public virtual DbSet<KnifeDetail> KnifeDetails { get; set; }
        public virtual DbSet<KnifeList> KnifeLists { get; set; }
        public virtual DbSet<KnifeMaster> KnifeMasters { get; set; }
        public virtual DbSet<KnifeUseLog> KnifeUseLogs { get; set; }
        public virtual DbSet<MeasureDetail> MeasureDetails { get; set; }
        public virtual DbSet<MeasureMaster> MeasureMasters { get; set; }
        public virtual DbSet<Model> Models { get; set; }
        public virtual DbSet<NailDetail> NailDetails { get; set; }
        public virtual DbSet<NailMaster> NailMasters { get; set; }
        public virtual DbSet<NutDetail> NutDetails { get; set; }
        public virtual DbSet<NutMaster> NutMasters { get; set; }
        public virtual DbSet<OutFrom> OutFroms { get; set; }
        public virtual DbSet<ProductionPlan> ProductionPlans { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<StockDetail> StockDetails { get; set; }
        public virtual DbSet<vCNC_Alarm_Log> vCNC_Alarm_Log { get; set; }
        public virtual DbSet<vCNC_Monitor> vCNC_Monitor { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
